<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="11.0"
         DefaultTargets="Build_Prepare_Download_GithubRelease_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <PropertyGroup>
        <FileToDownload>windows-amd64-github-release.zip</FileToDownload>
    </PropertyGroup>

    <Target
        DependsOnTargets="Build_Prepare_Download_GithubRelease_Extract"
        Name="Build_Prepare_Download_GithubRelease_Run">
    </Target>

    <Target Name="Build_Prepare_Download_GithubRelease_GetVersion">
        <GetSemanticVersionFromFile
            Condition="Exists('$(FileSemanticVersion)')"
            VersionFile="$(FileSemanticVersion)">
            <Output
                PropertyName="VersionMajor"
                TaskParameter="VersionMajor" />
            <Output
                PropertyName="VersionMinor"
                TaskParameter="VersionMinor" />
            <Output
                PropertyName="VersionPatch"
                TaskParameter="VersionPatch" />
        </GetSemanticVersionFromFile>

        <Message Text="Searching for major version: $(VersionMajor)" />
        <Message Text="Searching for minor version: $(VersionMinor)" />
        <Message Text="Searching for patch version: $(VersionPatch)" />
    </Target>

    <Target
        DependsOnTargets="Build_Prepare_Download_GithubRelease_GetVersion"
        Name="Build_Prepare_Download_GithubRelease_Download">
        <ItemGroup>
            <FilesToDownload Include="https://github.com/aktau/github-release/releases/download/v$(VersionMajor).$(VersionMinor).$(VersionPatch)/$(FileToDownload)">
                <OutputFile>$(FileToDownload)</OutputFile>
            </FilesToDownload>
        </ItemGroup>

        <DownloadFile
            Condition="!Exists('$(DirBuildTemp)\%(FilesToDownload.OutputFile)')"
            OutputPath="$(DirBuildTemp)\%(FilesToDownload.OutputFile)"
            Url="%(FilesToDownload.Identity)" />
    </Target>

    <Target
        DependsOnTargets="Build_Prepare_Download_GithubRelease_GetVersion;Build_Prepare_Download_GithubRelease_Download"
        Name="Build_Prepare_Download_GithubRelease_Extract">

        <Unzip InputFileName="$(DirBuildTemp)\$(FileToDownload)"
               DestinationDirectory="$(DirBuildTemp)\unzip\github-release" />
    </Target>

    <UsingTask TaskName="DownloadFile"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Url ParameterType="System.String" Required="true" />
            <OutputPath ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        try
                        {
                            Log.LogMessage(
                                MessageImportance.Normal,
                                "Downloading '{0}' to '{1}'",
                                Url,
                                OutputPath);

                            // Ignore certificate warnings
                            System.Net.ServicePointManager.ServerCertificateValidationCallback =
                                new System.Net.Security.RemoteCertificateValidationCallback(delegate { return true; });
                            System.Net.ServicePointManager.SecurityProtocol =
                                System.Net.SecurityProtocolType.Tls12 | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls;
                            using (var client = new System.Net.WebClient())
                            {
                                client.DownloadFile(Url, OutputPath);
                            }
                        }
                        catch(Exception e)
                        {
                            Log.LogError(e.ToString());
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
